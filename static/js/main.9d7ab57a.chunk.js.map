{"version":3,"sources":["components/sidebar/index.js","api/graphQLQueries.js","HOC/index.js","components/tree/index.js","components/apiBased/index.js","utils.js","components/generated/generatePrompt.js","components/generated/index.js","App.js","reportWebVitals.js","index.js"],"names":["SidebarButton","name","to","className","Sidebar","getContinentsQuery","gql","Context","createContext","Hoc","HocComponent","data","props","useState","openedNodes","setOpenedNodes","Provider","value","getIsOpen","includes","toggleIsOpen","item","children","length","isOpen","prevOpenedNodes","filter","nodeId","TreeController","useContext","printTree","itemsToRender","map","onClick","code","graphql","isLoading","setIsLoading","continents","setContinents","TreeComponent","useEffect","loading","generateData","depth","number","result","i","j","getRandomNumber","push","forEach","Math","ceil","random","GeneartePrompt","getCalculation","setDepth","setNumber","type","onChange","e","currentTarget","GeneratedController","list","setList","client","ApolloClient","uri","App","path","component","ApiBasedController","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d7ab57a.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom'\r\nimport './sidebar.css'\r\n\r\nconst SidebarButton = ({ name, to }) => {\r\n\treturn (\r\n\t\t<div className='sidebar__button_container'>\r\n\t\t\t<NavLink to={to}>\r\n\t\t\t\t<div className='sidebar__button'>\r\n\t\t\t\t\t<p>{name}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst Sidebar = () => {\r\n\treturn (\r\n\t\t<div className='sidebar'>\r\n\t\t\t<SidebarButton name='API-based' to='api' />\r\n\t\t\t<SidebarButton name='Generated' to='generated' />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Sidebar\r\n","import { gql } from 'apollo-boost'\r\n\r\nexport const getContinentsQuery = gql`\r\n\t{\r\n\t\tchildren: continents {\r\n\t\t\tname\r\n\t\t\tcode\r\n\t\t\tchildren: countries {\r\n\t\t\t\tname\r\n\t\t\t\tcode\r\n\t\t\t\tchildren: languages {\r\n\t\t\t\t\tname\r\n\t\t\t\t\tcode\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`\r\n","import { useState, createContext } from 'react'\r\nexport const Context = createContext()\r\n\r\nconst Hoc = (HocComponent, data) => {\r\n\tconst HocedComponent = (props) => {\r\n\t\tconst [openedNodes, setOpenedNodes] = useState([])\r\n\r\n\t\tconst toggleIsOpen = (item) => {\r\n\t\t\tif (!item.children || !item.children.length) {\r\n\t\t\t\tsetOpenedNodes([])\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tconst isOpen = openedNodes.includes(item.name)\r\n\t\t\tif (isOpen) {\r\n\t\t\t\tsetOpenedNodes((prevOpenedNodes) =>\r\n\t\t\t\t\tprevOpenedNodes.filter((nodeId) => nodeId !== item.name),\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\tsetOpenedNodes((prevOpenedNodes) => [\r\n\t\t\t\t\t...prevOpenedNodes,\r\n\t\t\t\t\titem.name,\r\n\t\t\t\t])\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst getIsOpen = (name) => {\r\n\t\t\treturn openedNodes.includes(name)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<Context.Provider\r\n\t\t\t\tvalue={{\r\n\t\t\t\t\tgetIsOpen,\r\n\t\t\t\t\ttoggleIsOpen,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<HocComponent data={data} {...props} />\r\n\t\t\t</Context.Provider>\r\n\t\t)\r\n\t}\r\n\treturn HocedComponent\r\n}\r\n\r\nexport default Hoc\r\n","import { useContext } from 'react'\r\nimport { Context } from '../../HOC'\r\nimport './tree.css'\r\n\r\nconst TreeController = ({ data }) => {\r\n\tconst { getIsOpen, toggleIsOpen } = useContext(Context)\r\n\r\n\tconst printTree = (itemsToRender) => {\r\n\t\treturn itemsToRender.map((item) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={item.code}>\r\n\t\t\t\t\t<p\r\n\t\t\t\t\t\tclassName='list-item__name'\r\n\t\t\t\t\t\tonClick={() => toggleIsOpen(item)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t{item?.children?.length && getIsOpen(item.name) ? (\r\n\t\t\t\t\t\t<ul>{printTree(item.children)}</ul>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='tree'>\r\n\t\t\t<ul className='tree-container'>\r\n\t\t\t\t{data && data.length > 0 && printTree(data)}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TreeController\r\n","import { useEffect, useState } from 'react'\r\nimport { graphql } from 'react-apollo'\r\nimport { getContinentsQuery } from '../../api/graphQLQueries'\r\nimport Hoc from '../../HOC'\r\nimport TreeController from '../tree'\r\n\r\nexport const ApiBasedController = ({ data }) => {\r\n\tconst [isLoading, setIsLoading] = useState(true)\r\n\tconst [continents, setContinents] = useState([])\r\n\tconst TreeComponent = Hoc(TreeController, continents)\r\n\r\n\tuseEffect(() => {\r\n\t\tsetIsLoading(data.loading)\r\n\t\tif (!data.loading) {\r\n\t\t\tsetContinents(data.children)\r\n\t\t}\r\n\t}, [data])\r\n\r\n\treturn <div>{isLoading ? <h2>Loading...</h2> : <TreeComponent />}</div>\r\n}\r\n\r\nexport default graphql(getContinentsQuery)(ApiBasedController)\r\n","export const generateData = (depth = 2, number = 2) => {\r\n\tconst result = []\r\n\r\n\tfor (let i = 0; i < depth; i++) {\r\n\t\tif (i === 0) {\r\n\t\t\tfor (let j = 0; j < number; j++) {\r\n\t\t\t\tconst code = getRandomNumber()\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tname: code,\r\n\t\t\t\t\tcode,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tresult.forEach((item) => {\r\n\t\t\titem.children = generateData(i, number)\r\n\t\t})\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nconst getRandomNumber = () => {\r\n\treturn Math.ceil(Math.random() * 1000)\r\n}\r\n","import { useState } from 'react'\r\nimport { generateData } from '../../utils'\r\n\r\nexport const GeneartePrompt = ({ getCalculation }) => {\r\n\tconst [depth, setDepth] = useState('')\r\n\tconst [number, setNumber] = useState('')\r\n\r\n\tconst calculate = () => {\r\n\t\tgetCalculation(generateData(depth, number))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='genearte-prompt'>\r\n\t\t\t<h2>\r\n\t\t\t\tTo generate mock data enter two digits: depth of JSON tree and\r\n\t\t\t\tnumber of children in each node. Then press \"Calculate\".\r\n\t\t\t</h2>\r\n\t\t\t<input\r\n\t\t\t\tvalue={depth}\r\n\t\t\t\ttype='number'\r\n\t\t\t\tonChange={(e) => setDepth(e.currentTarget.value)}\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\tvalue={number}\r\n\t\t\t\ttype='number'\r\n\t\t\t\tonChange={(e) => setNumber(e.currentTarget.value)}\r\n\t\t\t/>\r\n\t\t\t<button className='genearte-prompt__button' onClick={calculate}>\r\n\t\t\t\tCalculate\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import { useState } from 'react'\r\nimport Hoc from '../../HOC'\r\nimport TreeController from '../tree'\r\nimport { GeneartePrompt } from './generatePrompt'\r\nimport './genearted.css'\r\n\r\nexport const GeneratedController = () => {\r\n\tconst [list, setList] = useState([])\r\n\tconst TreeComponent = Hoc(TreeController, list)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<GeneartePrompt getCalculation={setList} />\r\n\t\t\t<TreeComponent />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GeneratedController\r\n","import './App.css'\nimport { ApolloProvider } from 'react-apollo'\nimport ApolloClient from 'apollo-boost'\nimport Sidebar from './components/sidebar'\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\n\nimport ApiBasedController from './components/apiBased'\nimport GeneratedController from './components/generated'\n\nconst client = new ApolloClient({\n\turi: 'https://countries.trevorblades.com/',\n})\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<HashRouter>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<Sidebar />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path='/api' component={ApiBasedController} />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath='/generated'\n\t\t\t\t\t\t\tcomponent={GeneratedController}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Redirect to='/api' />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</HashRouter>\n\t\t</ApolloProvider>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}